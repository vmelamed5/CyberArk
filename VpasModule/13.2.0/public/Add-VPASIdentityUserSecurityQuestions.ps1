<#
.Synopsis
   ADD USER SECURITY QUESTIONS IN IDENTITY
   CREATED BY: Vadim Melamed, EMAIL: vmelamed5@gmail.com
.DESCRIPTION
   USE THIS FUNCTION TO ADD A USERS SECURITY QUESTIONS IN IDENTITY
.PARAMETER token
   HashTable of data containing various pieces of login information (PVWA, LoginToken, HeaderType, etc).
   If -token is not passed, function will use last known hashtable generated by New-VPASToken
.PARAMETER username
   Username that will be used to query for the target user in Identity if no UserID is passed
.PARAMETER UserID
   Unique UserID that maps to the target User in Identity
   Supply the UserID to skip any querying for the target User
.PARAMETER QuestionText
   Security question that will be added to the users profile
.PARAMETER AnswerText
   Security question answer that will be added to the users profile
.EXAMPLE
   $AddUserSecurityQuestions = Add-VPASIdentityUserSecurityQuestions -Username {USERNAME VALUE} -QuestionText {SECURITY QUESTION VALUE} -AnswerText {SECURITY QUESTION ANSWER VALUE}
.EXAMPLE
   $AddUserSecurityQuestions = Add-VPASIdentityUserSecurityQuestions -UserID {USERID VALUE} -QuestionText {SECURITY QUESTION VALUE} -AnswerText {SECURITY QUESTION ANSWER VALUE}
.OUTPUTS
   $true if successful
   $false if failed
#>
function Add-VPASIdentityUserSecurityQuestions{
    [OutputType('System.Object',[bool])]
    [CmdletBinding()]
    Param(

        [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$true,Position=0)]
        [String]$Username,

        [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$true,Position=1)]
        [String]$UserID,

        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,HelpMessage="Enter security question (for example: What is my favorite color?)",Position=2)]
        [String]$QuestionText,

        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,HelpMessage="Enter security question answer (for example: My favorite color is Blue!)",Position=3)]
        [String]$AnswerText,

        [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$true,Position=4)]
        [hashtable]$token
    )

    Begin{
        $tokenval,$sessionval,$PVWA,$Header,$ISPSS,$IdentityURL,$EnableTextRecorder,$AuditTimeStamp,$NoSSL = Get-VPASSession -token $token
    }
    Process{
        $log = Write-VPASTextRecorder -inputval "Add-VPASIdentityUserSecurityQuestions" -token $token -LogType COMMAND

        Write-Verbose "SUCCESSFULLY PARSED PVWA VALUE"
        Write-Verbose "SUCCESSFULLY PARSED TOKEN VALUE"

        try{

            if(!$IdentityURL){
                Write-VPASOutput -str "LOGIN TOKEN WAS NOT GENERATED THROUGH IDENTITY, TERMINATING API CALL" -type E
                $log = Write-VPASTextRecorder -inputval "LOGIN TOKEN WAS NOT GENERATED THROUGH IDENTITY, TERMINATING API CALL" -token $token -LogType MISC
                $log = Write-VPASTextRecorder -inputval "REST API COMMAND RETURNED: FALSE" -token $token -LogType MISC
                $log = Write-VPASTextRecorder -inputval "Add-VPASIdentityUserSecurityQuestions" -token $token -LogType DIVIDER
                return $false
            }

            if([String]::IsNullOrEmpty($UserID)){
                Write-Verbose "NO USER ID PASSED"
                Write-Verbose "INVOKING HELPER FUNCTION TO RETRIEVE USER ID"

                if($NoSSL){
                    $UserID = Get-VPASUserIDIdentityHelper -token $token -User $Username -NoSSL
                }
                else{
                    $UserID = Get-VPASUserIDIdentityHelper -token $token -User $Username
                }

                if($UserID -eq -1){
                    Write-VPASOutput -str "MULTIPLE USER ENTRIES WERE RETURNED, ADD MORE TO NAME TO NARROW RESULTS" -type E
                    Write-VPASOutput -str "RETURNING FALSE" -type E
                    $log = Write-VPASTextRecorder -inputval "REST API COMMAND RETURNED: FALSE" -token $token -LogType MISC
                    $log = Write-VPASTextRecorder -inputval "Add-VPASIdentityUserSecurityQuestions" -token $token -LogType DIVIDER
                    return $false
                }
                elseif($UserID -eq -2){
                    Write-VPASOutput -str "NO USER ENTRIES WERE RETURNED" -type E
                    Write-VPASOutput -str "RETURNING FALSE" -type E
                    $log = Write-VPASTextRecorder -inputval "REST API COMMAND RETURNED: FALSE" -token $token -LogType MISC
                    $log = Write-VPASTextRecorder -inputval "Add-VPASIdentityUserSecurityQuestions" -token $token -LogType DIVIDER
                    return $false
                }
                else{
                    Write-Verbose "FOUND UNIQUE USER ID"
                }
            }
            else{
                Write-Verbose "USER ID PASSED, SKIPPING HELPER FUNCTION"
            }

            Write-Verbose "CONSTRUCTING PARAMS"

            [psobject]$questionparam = @{
                QuestionText = $QuestionText
                Answer = $AnswerText
                Type = "User"
            }

            $params = @{
                ID = $UserID
                Replace = $false
                Added = @(
                    $questionparam
                )
            }
            $log = Write-VPASTextRecorder -inputval $params -token $token -LogType PARAMS
            $params = $params | ConvertTo-Json

            Write-Verbose "ADDING USER ID: $UserID TO PARAMS"
            Write-Verbose "ADDING QUESTION TEXT: $QuestionText TO PARAMS"
            Write-Verbose "ADDING ANSWER TEXT: $AnswerText TO PARAMS"

            if($NoSSL){
                Write-Verbose "NO SSL ENABLED, USING HTTP INSTEAD OF HTTPS"
                $uri = "http://$IdentityURL/UserMgmt/UpdateSecurityQuestions"
            }
            else{
                Write-Verbose "SSL ENABLED BY DEFAULT, USING HTTPS"
                $uri = "https://$IdentityURL/UserMgmt/UpdateSecurityQuestions"
            }

            $log = Write-VPASTextRecorder -inputval $uri -token $token -LogType URI
            $log = Write-VPASTextRecorder -inputval "POST" -token $token -LogType METHOD

            if($sessionval){
                $response = Invoke-RestMethod -Headers @{"Authorization"=$Header} -Uri $uri -Method POST -Body $params -ContentType "application/json" -WebSession $sessionval
            }
            else{
                $response = Invoke-RestMethod -Headers @{"Authorization"=$Header} -Uri $uri -Method POST -Body $params -ContentType "application/json"
            }

            if($response.success){
                $log = Write-VPASTextRecorder -inputval "REST API COMMAND RETURNED: TRUE" -token $token -LogType MISC
                $log = Write-VPASTextRecorder -inputval "Add-VPASIdentityUserSecurityQuestions" -token $token -LogType DIVIDER
                return $true
            }
            else{
                $err = $response.Message
                Write-VPASOutput -str $err -type E
                $log = Write-VPASTextRecorder -inputval $err -token $token -LogType ERROR
                $log = Write-VPASTextRecorder -inputval "REST API COMMAND RETURNED: FALSE" -token $token -LogType MISC
                $log = Write-VPASTextRecorder -inputval "Add-VPASIdentityUserSecurityQuestions" -token $token -LogType DIVIDER
                return $false
            }
        }catch{
            $log = Write-VPASTextRecorder -inputval $_ -token $token -LogType ERROR
            $log = Write-VPASTextRecorder -inputval "REST API COMMAND RETURNED: FALSE" -token $token -LogType MISC
            $log = Write-VPASTextRecorder -inputval "Add-VPASIdentityUserSecurityQuestions" -token $token -LogType DIVIDER
            Write-Verbose "FAILED TO RETRIEVE USERS FROM IDENTITY"
            Write-VPASOutput -str $_ -type E
            return $false
        }
    }
    End{

    }
}
