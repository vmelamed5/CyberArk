<#
.Synopsis
   DELETE PLATFORM
   CREATED BY: Vadim Melamed, EMAIL: vmelamed5@gmail.com
.DESCRIPTION
   USE THIS FUNCTION TO DELETE A PLATFORM
.PARAMETER token
   HashTable of data containing various pieces of login information (PVWA, LoginToken, HeaderType, etc).
   If -token is not passed, function will use last known hashtable generated by New-VPASToken
.PARAMETER DeletePlatformID
   Unique PlatformID to delete
.PARAMETER WhatIf
   Run code simulation to see what is affected by running the command as well as any possible implications
   This is a code simulation flag, meaning the command will NOT actually run
.PARAMETER HideWhatIfOutput
   Suppress any code simulation output from the console
.EXAMPLE
   $WhatIfSimulation = Remove-VPASPlatform -DeletePlatformID {DELETE PLATFORMID VALUE} -WhatIf
.EXAMPLE
   $DeletePlatformStatus = Remove-VPASPlatform -DeletePlatformID {DELETE PLATFORMID VALUE}
.OUTPUTS
   $true if successful
   $false if failed
#>
function Remove-VPASPlatform{
    [OutputType([bool],'System.Object')]
    [CmdletBinding()]
    Param(

        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,HelpMessage="Enter target PlatformID (for example: WinServerLocal)",Position=0)]
        [String]$DeletePlatformID,

        [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$true,Position=1)]
        [hashtable]$token,

        [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$true,Position=2)]
        [Switch]$WhatIf,

        [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$true,Position=3)]
        [Switch]$HideWhatIfOutput

    )

    Begin{
        $tokenval,$sessionval,$PVWA,$Header,$ISPSS,$IdentityURL,$EnableTextRecorder,$AuditTimeStamp,$NoSSL,$VaultVersion = Get-VPASSession -token $token
        $CommandName = $MyInvocation.MyCommand.Name
        $log = Write-VPASTextRecorder -inputval $CommandName -token $token -LogType COMMAND
    }
    Process{
        Write-Verbose "SUCCESSFULLY PARSED PVWA VALUE"
        Write-Verbose "SUCCESSFULLY PARSED TOKEN VALUE"
        Write-Verbose "SUCCESSFULLY PARSED DELETEPLATFORMID VALUE: $DeletePlatformID"
        Write-Verbose "SUCCESSFULLY PARSED SSL VALUE"

        try{

            Write-Verbose "INVOKING PLATFORMID HELPER FUNCTION"
            $platID = Get-VPASPlatformIDHelper -token $token -platformID $DeletePlatformID

            if($platID -eq -1){
                $log = Write-VPASTextRecorder -inputval "COULD NOT FIND TARGET PLATFORMID: $DeletePlatformID" -token $token -LogType MISC
                $log = Write-VPASTextRecorder -inputval "REST API COMMAND RETURNED: FALSE" -token $token -LogType MISC
                Write-Verbose "COULD NOT FIND TARGET PLATFORMID: $DeletePlatformID"
                Write-VPASOutput -str "COULD NOT FIND TARGET PLATFORMID: $DeletePlatformID" -type E
                return $false
            }
            else{
                Write-Verbose "FOUND PLATFORMID: $platID"

                Write-Verbose "MAKING API CALL TO CYBERARK"
                if($NoSSL){
                    Write-Verbose "NO SSL ENABLED, USING HTTP INSTEAD OF HTTPS"
                    $uri = "http://$PVWA/passwordvault/api/platforms/targets/$platID/"
                }
                else{
                    Write-Verbose "SSL ENABLED BY DEFAULT, USING HTTPS"
                    $uri = "https://$PVWA/passwordvault/api/platforms/targets/$platID/"
                }
                $log = Write-VPASTextRecorder -inputval $uri -token $token -LogType URI
                $log = Write-VPASTextRecorder -inputval "DELETE" -token $token -LogType METHOD

                if($WhatIf){
                    $log = Write-VPASTextRecorder -token $token -LogType WHATIF1
                    $WhatIfHash = @{}
                    Write-Verbose "INITIATING COMMAND SIMULATION"

                    $WhatIfInfo = Get-VPASPlatformDetailsSearch -SearchQuery $DeletePlatformID -token $token

                    foreach($WhatIfPlat in $WhatIfInfo){
                        $WhatIfPlatPlatformID = $WhatIfPlat.PlatformID

                        if($WhatIfPlatPlatformID -eq $DeletePlatformID){
                            $WhatIfPlatPrivilegedSessionManagement = $WhatIfPlat.PrivilegedSessionManagement
                            $WhatIfPlatID = $WhatIfPlat.ID
                            $WhatIfPlatSystemType = $WhatIfPlat.SystemType
                            $WhatIfPlatCredentialsManagementPolicy = $WhatIfPlat.CredentialsManagementPolicy
                            $WhatIfPlatPrivilegedAccessWorkflows = $WhatIfPlat.PrivilegedAccessWorkflows
                            $WhatIfPlatAllowedSafes = $WhatIfPlat.AllowedSafes
                            $WhatIfPlatName = $WhatIfPlat.Name
                            $WhatIfPlatActive = $WhatIfPlat.Active

                            $WhatIfCounter = 0
                            $WhatIfAccountsAffected = @()
                            $AffectedAccounts = Get-VPASAccountDetails -platform $WhatIfPlatPlatformID -HideWarnings -token $token
                            foreach($AffectedAcct in $AffectedAccounts.value){
                                $AffectedAcctPlatformID = $AffectedAcct.platformId
                                if($AffectedAcctPlatformID -eq $WhatIfPlatPlatformID){
                                    $WhatIfCounter += 1
                                    $WhatIfAccountsAffectedHash = @{
                                        SafeName = $AffectedAcct.safeName
                                        ID = $AffectedAcct.id
                                        Address = $AffectedAcct.address
                                        Username = $AffectedAcct.userName
                                        Name = $AffectedAcct.name
                                    }
                                    $WhatIfAccountsAffected += $WhatIfAccountsAffectedHash
                                }
                            }
                        }
                    }

                    if(!$HideWhatIfOutput){
                        Write-VPASOutput -str "====== BEGIN COMMAND SIMULATION ======" -type S
                        Write-VPASOutput -str "THE FOLLOWING PLATFORM WOULD BE DELETED:" -type S
                        Write-VPASOutput -str "PlatformID                  : $WhatIfPlatPlatformID" -type S
                        Write-VPASOutput -str "PrivilegedSessionManagement : $WhatIfPlatPrivilegedSessionManagement" -type S
                        Write-VPASOutput -str "ID                          : $WhatIfPlatID" -type S
                        Write-VPASOutput -str "SystemType                  : $WhatIfPlatSystemType" -type S
                        Write-VPASOutput -str "CredentialsManagementPolicy : $WhatIfPlatCredentialsManagementPolicy" -type S
                        Write-VPASOutput -str "PrivilegedAccessWorkflows   : $WhatIfPlatPrivilegedAccessWorkflows" -type S
                        Write-VPASOutput -str "AllowedSafes                : $WhatIfPlatAllowedSafes" -type S
                        Write-VPASOutput -str "Name                        : $WhatIfPlatName" -type S
                        Write-VPASOutput -str "Active                      : $WhatIfPlatActive" -type S
                        Write-VPASOutput -str "NumberOfAffectedAccounts    : $WhatIfCounter" -type S
                        Write-VPASOutput -str "AffectedAccounts            : $WhatIfAccountsAffected" -type S
                        Write-VPASOutput -str "---" -type S
                        Write-VPASOutput -str "URI                         : $uri" -type S
                        Write-VPASOutput -str "METHOD                      : DELETE" -type S
                        Write-VPASOutput -str " " -type S
                        Write-VPASOutput -str "======= END COMMAND SIMULATION =======" -type S
                    }
                    $WhatIfHash = @{
                        WhatIf = @{
                            PlatformID = $WhatIfPlatPlatformID
                            PrivilegedSessionManagement = $WhatIfPlatPrivilegedSessionManagement
                            ID = $WhatIfPlatID
                            SystemType = $WhatIfPlatSystemType
                            CredentialsManagementPolicy = $WhatIfPlatCredentialsManagementPolicy
                            PrivilegedAccessWorkflows = $WhatIfPlatPrivilegedAccessWorkflows
                            AllowedSafes = $WhatIfPlatAllowedSafes
                            Name = $WhatIfPlatName
                            Active = $WhatIfPlatActive
                            RestURI = $uri
                            NumberOfAffectedAccounts = $WhatIfCounter
                            AffectedAccounts = $WhatIfAccountsAffected
                            RestMethod = "DELETE"
                            Disclaimer = "THIS PLATFORM WILL BE DELETED IF -WhatIf FLAG IS REMOVED"
                        }
                    }
                    $WhatIfJSON = $WhatIfHash | ConvertTo-Json | ConvertFrom-Json
                    $log = Write-VPASTextRecorder -inputval $WhatIfJSON -token $token -LogType RETURNARRAY
                    $log = Write-VPASTextRecorder -token $token -LogType WHATIF2
                    return $WhatIfJSON
                }
                else{
                    if($sessionval){
                        $response = Invoke-RestMethod -Headers @{"Authorization"=$Header} -Uri $uri -Method DELETE -ContentType "application/json" -WebSession $sessionval
                    }
                    else{
                        $response = Invoke-RestMethod -Headers @{"Authorization"=$Header} -Uri $uri -Method DELETE -ContentType "application/json"
                    }
                    $log = Write-VPASTextRecorder -inputval "REST API COMMAND RETURNED: TRUE" -token $token -LogType MISC
                    Write-Verbose "SUCCESSFULLY DELETED $DeletePlatformID"
                    Write-Verbose "RETURNING TRUE"
                    return $true
                }
            }
        }catch{
            $log = Write-VPASTextRecorder -inputval $_ -token $token -LogType ERROR
            $log = Write-VPASTextRecorder -inputval "REST API COMMAND RETURNED: FALSE" -token $token -LogType MISC
            Write-Verbose "UNABLE TO DELETE $DeletePlatformID"
            Write-VPASOutput -str $_ -type E
            return $false
        }
    }
    End{
        $log = Write-VPASTextRecorder -inputval $CommandName -token $token -LogType DIVIDER
    }
}